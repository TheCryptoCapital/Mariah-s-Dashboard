<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meet Mariah | The Crypto Capital</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600;800&family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --deep-purple: #1E0030;
            --medium-purple: #2A0D45;
            --teal: #00FFF5;
            --teal-glow: rgba(0, 255, 245, 0.7);
            --blue: #00A1FF;
            --pink: #FF00FF;
            --pink-glow: rgba(255, 0, 255, 0.7);
            --white: #FFFFFF;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #000;
            color: var(--white);
            overflow-x: hidden;
            line-height: 1.6;
        }

        /* Navigation Bar */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            padding: 1.2rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000;
            background: rgba(0, 0, 30, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(0, 255, 245, 0.2);
            box-shadow: 0 0 20px rgba(0, 0, 30, 0.8);
        }

        .logo-container {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .logo {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.5rem;
            color: var(--teal);
            text-decoration: none;
            text-shadow: 0 0 10px var(--teal-glow);
        }

        .powered-by {
            font-family: 'Orbitron', sans-serif;
            font-size: 0.7rem;
            color: var(--pink);
            margin-top: -8px;
            margin-left: 45px;
            text-shadow: 0 0 10px var(--pink-glow), 0 0 15px var(--pink-glow);
            animation: pulse-pink 3s infinite ease-in-out;
        }

        @keyframes pulse-pink {
            0% { text-shadow: 0 0 5px var(--pink-glow); }
            50% { text-shadow: 0 0 15px var(--pink-glow), 0 0 20px var(--pink-glow); }
            100% { text-shadow: 0 0 5px var(--pink-glow); }
        }

        .nav-links {
            display: flex;
            gap: 1.5rem;
        }

        .nav-link {
            font-family: 'Orbitron', sans-serif;
            font-size: 0.9rem;
            color: var(--white);
            text-decoration: none;
            transition: all 0.3s ease;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            border: 1px solid transparent;
        }

        .nav-link:hover {
            color: var(--teal);
            border-color: rgba(0, 255, 245, 0.3);
            background: rgba(0, 10, 30, 0.5);
            box-shadow: 0 0 15px rgba(0, 255, 245, 0.2);
        }

        /* Animated Gateway Background */
        .gateway-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('gateway.jpg'); /* Gateway image saved in same folder */
            background-size: cover;
            background-position: center;
            z-index: -3;
        }

        /* Animation overlay for the gateway effect */
        .gateway-animation {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            background: radial-gradient(circle at center, transparent 30%, rgba(0, 0, 30, 0.6) 100%);
            animation: pulse-light 10s infinite ease-in-out;
        }

        /* Slow zoom effect on the background */
        .zoom-effect {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('gateway.jpg'); /* Same gateway image */
            background-size: 110% 110%;
            background-position: center;
            z-index: -3;
            animation: slow-zoom 30s infinite alternate ease-in-out;
            opacity: 0.7;
        }

        /* Animated light rays around the planet */
        .light-rays {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(
                ellipse at 50% 40%, 
                rgba(0, 180, 255, 0.2) 0%, 
                transparent 70%
            );
            z-index: -1;
            animation: pulse-rays 8s infinite ease-in-out;
        }

        /* Floating data elements */
        .data-element {
            position: absolute;
            background-color: rgba(0, 255, 245, 0.07);
            border: 1px solid rgba(0, 255, 245, 0.15);
            border-radius: 3px;
            font-family: 'Orbitron', sans-serif;
            color: var(--teal);
            font-size: 10px;
            padding: 5px;
            animation: float-data var(--float-duration) infinite linear;
            z-index: 1;
            transform: translateY(var(--initial-y));
            opacity: 0.7;
            white-space: nowrap;
            text-shadow: 0 0 5px rgba(0, 255, 245, 0.8);
            box-shadow: 0 0 15px rgba(0, 255, 245, 0.3);
        }

        /* Content background overlay for readability */
        .content-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, 
                rgba(0, 0, 30, 0.6) 0%, 
                rgba(0, 0, 30, 0.4) 50%,
                rgba(0, 0, 30, 0.6) 100%);
            z-index: -1;
        }

        /* Header Section */
        header {
            padding: 1.5rem;
            padding-top: 80px; /* Reduced from 90px to 80px to shift content up slightly */
            text-align: center;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding-bottom: 3rem;
            align-items: center;
            position: relative;
            z-index: 1;
        }

        .title {
            font-family: 'Orbitron', sans-serif;
            font-size: 3.5rem;
            font-weight: 800;
            margin-bottom: 1rem;
            color: var(--teal);
            text-shadow: 0 0 15px var(--teal-glow), 0 0 30px var(--teal-glow);
            animation: pulse 3s infinite ease-in-out;
        }

        .scroll-text {
            display: block;
            color: var(--teal);
            font-size: 0.9rem;
            margin: 0.5rem 0;
            animation: fade-in-out 2s infinite;
            position: relative;
        }
        
        .scroll-text:after {
            content: "↓";
            display: block;
            font-size: 1.2rem;
            margin-top: 0.2rem;
            animation: bounce 2s infinite;
        }
        
        .subtitle {
            font-size: 1.2rem;
            max-width: 800px;
            margin: 0 auto 1.25rem;
            line-height: 1.6; /* Slightly tighter line height */
            opacity: 0.9;
            text-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
            background-color: rgba(0, 0, 30, 0.5);
            padding: 1rem;
            border-radius: 10px;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }

        /* Mariah Avatar */
        .avatar-placeholder {
            text-align: center;
            margin: 1.25rem 0;
            overflow: hidden;
            position: relative;
            border-radius: 50%;
            width: 300px;
            height: 300px;
            margin: 1.25rem auto;
            animation: float 6s infinite ease-in-out;
        }

        .avatar-placeholder:before {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            background: linear-gradient(45deg, var(--teal), var(--blue), var(--pink), var(--teal));
            z-index: -1;
            border-radius: 50%;
            animation: rotate-gradient 10s linear infinite;
        }

        .avatar-placeholder img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
            border: 3px solid rgba(0, 255, 245, 0.3);
            box-shadow: 
                0 0 25px var(--teal-glow),
                0 0 50px rgba(0, 161, 255, 0.4);
        }

        /* Scroll Indicator */
        .scroll-indicator {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
            color: var(--teal);
            animation: fade-in-out 2s infinite;
            z-index: 5;
        }

        .scroll-arrow {
            font-size: 2rem;
            animation: bounce 2s infinite;
        }

        /* About Us Tab Section */
        .about-section {
            padding: 2rem;
            max-width: 1200px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        .tab-container {
            text-align: center;
            margin-bottom: 2rem;
        }

        .tab-button {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.2rem;
            background: linear-gradient(45deg, rgba(0, 10, 30, 0.7), rgba(0, 20, 50, 0.7));
            color: var(--teal);
            border: 2px solid var(--teal);
            border-radius: 30px;
            padding: 0.8rem 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            box-shadow: 0 0 15px rgba(0, 255, 245, 0.3);
            position: relative;
            overflow: hidden;
        }

        .tab-button:hover {
            box-shadow: 0 0 25px rgba(0, 255, 245, 0.5);
            transform: translateY(-2px);
        }

        .tab-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-out;
        }

        .tab-content.active {
            max-height: 5000px; /* Large enough to show all content */
        }

        /* Cards */
        .card {
            background: rgba(0, 10, 40, 0.7);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 3rem;
            border: 1px solid rgba(0, 255, 245, 0.2);
            box-shadow: 
                0 0 20px rgba(0, 255, 245, 0.15),
                inset 0 0 50px rgba(0, 20, 80, 0.3);
            transform: translateY(50px);
            opacity: 0;
            transition: all 0.8s ease-out;
        }

        .card:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, 
                rgba(0, 255, 245, 0.1) 0%, 
                rgba(0, 161, 255, 0.05) 50%, 
                rgba(255, 0, 255, 0.05) 100%);
            border-radius: 20px;
            z-index: -1;
            opacity: 0.5;
        }

        .card.visible {
            transform: translateY(0);
            opacity: 1;
        }

        .card-title {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: var(--teal);
            text-shadow: 0 0 10px var(--teal-glow);
        }

        .card-content {
            font-size: 1.1rem;
            line-height: 1.8;
        }

        .card-content ul {
            margin-left: 2rem;
            margin-top: 1rem;
        }

        .card-content li {
            margin-bottom: 0.5rem;
        }

        /* Enter Button */
        .enter-button-container {
            text-align: center;
            padding: 3rem 0 6rem;
            position: relative;
            z-index: 1;
        }

        .enter-button {
            font-family: 'Orbitron', sans-serif;
            font-size: 1.2rem;
            background: linear-gradient(45deg, rgba(0, 20, 40, 0.8), rgba(0, 30, 70, 0.8));
            color: var(--teal);
            border: 2px solid var(--teal);
            border-radius: 50px;
            padding: 1rem 2.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 0 20px var(--teal-glow);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }

        .enter-button:hover {
            box-shadow: 0 0 30px var(--teal-glow), 0 0 50px rgba(0, 255, 245, 0.4);
            transform: scale(1.05);
        }

        .enter-button:after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                rgba(255, 255, 255, 0),
                rgba(255, 255, 255, 0.1),
                rgba(255, 255, 255, 0)
            );
            transform: rotate(30deg);
            animation: shimmer 3s infinite;
        }

        /* Particle effects */
        .particle {
            position: absolute;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            width: 2px;
            height: 2px;
            animation: particle-float var(--duration) var(--delay) infinite linear;
            box-shadow: 0 0 var(--glow-size) var(--glow-color);
            opacity: var(--opacity);
            z-index: 0;
        }

        /* PREMIUM MARIAH STYLES */
        #mariah-entity {
            position: fixed;
            z-index: 9999;
            pointer-events: none;
            transition: transform 0.3s ease-out;
            will-change: transform, opacity;
        }

        .mariah-character {
            position: relative;
            width: 360px; /* 50% larger than before */
            height: 600px; /* 50% larger than before */
        }

        .mariah-aura {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            border-radius: 30% 30% 40% 40% / 20% 20% 60% 60%;
            filter: blur(20px);
            opacity: 0.7;
            background: radial-gradient(ellipse at center, var(--aura-color, rgba(0, 255, 245, 0.3)) 0%, transparent 70%);
            animation: pulse-aura 5s infinite ease-in-out;
            z-index: -1;
        }

        .mariah-body {
            position: absolute;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, 
                rgba(30, 0, 48, 0.9) 0%, 
                rgba(10, 0, 30, 0.9) 40%, 
                rgba(0, 20, 40, 0.9) 100%);
            clip-path: polygon(50% 0%, 80% 10%, 90% 35%, 95% 60%, 90% 80%, 75% 95%, 50% 100%, 25% 95%, 10% 80%, 5% 60%, 10% 35%, 20% 10%);
            border-radius: 30% 30% 40% 40% / 20% 20% 60% 60%;
            border: 2px solid rgba(0, 255, 245, 0.6);
            box-shadow: 
                0 0 30px rgba(0, 255, 245, 0.6), 
                inset 0 0 60px rgba(0, 0, 15, 0.8);
            animation: float 6s infinite ease-in-out, sway 4s infinite ease-in-out alternate;
            z-index: 1;
        }

        .mariah-head {
            position: absolute;
            top: 30px;
            left: 50%;
            transform: translateX(-50%);
            width: 120px;
            height: 120px;
            background: linear-gradient(to bottom, 
                rgba(40, 0, 60, 0.9), 
                rgba(20, 0, 40, 0.9));
            border-radius: 50%;
            border: 2px solid rgba(0, 255, 245, 0.6);
            box-shadow: 0 0 30px rgba(0, 255, 245, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2;
            overflow: hidden;
        }

        .head-content {
            color: var(--head-color, #00fff5);
            font-size: 54px;
            font-weight: bold;
            text-shadow: 0 0 15px var(--head-glow, rgba(0, 255, 245, 0.8));
            font-family: 'Orbitron', sans-serif;
            transition: all 0.5s ease;
        }

        .mariah-face {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: opacity 0.5s ease;
        }

        .mariah-eyes {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        .eye-row {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: -10px;
        }

        .eye {
            width: 20px;
            height: 8px;
            background-color: var(--head-color, #00fff5);
            border-radius: 8px;
            position: relative;
            box-shadow: 0 0 10px var(--head-glow, rgba(0, 255, 245, 0.6));
        }

        .eye::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 6px;
            height: 6px;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 50%;
            box-shadow: 0 0 8px rgba(255, 255, 255, 0.8);
        }

        .mariah-mouth {
            width: 30px;
            height: 3px;
            background-color: var(--head-color, #00fff5);
            border-radius: 2px;
            margin-top: 15px;
            position: relative;
            box-shadow: 0 0 10px var(--head-glow, rgba(0, 255, 245, 0.6));
            transition: all 0.3s ease;
        }

        .mariah-legs {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 40%;
            z-index: 0;
        }

        .mariah-leg {
            position: absolute;
            bottom: 0;
            width: 15%;
            background: linear-gradient(to bottom, 
                transparent 0%, 
                rgba(0, 255, 245, 0.1) 40%, 
                rgba(0, 255, 245, 0.5) 100%);
            border-radius: 30% 30% 0 0;
            transition: all 0.3s ease;
        }

        .mariah-leg-left {
            left: 35%;
            height: var(--left-leg-height, 30%);
        }

        .mariah-leg-right {
            left: 50%;
            height: var(--right-leg-height, 40%);
        }

        .inner-glow {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 30% 30% 40% 40% / 20% 20% 60% 60%;
            background: radial-gradient(ellipse at center, 
                var(--inner-glow-color, rgba(0, 255, 245, 0.2)) 0%, 
                transparent 70%);
            opacity: 0.6;
            filter: blur(5px);
            z-index: 0;
        }

        .energy-lines {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .energy-line {
            position: absolute;
            height: 2px;
            background: linear-gradient(to right, 
                transparent, 
                var(--line-color, #00fff5), 
                transparent);
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            animation: pulse-line 3s infinite ease-in-out;
        }

        .energy-pulse {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 30% 30% 40% 40% / 20% 20% 60% 60%;
            box-shadow: 0 0 20px var(--pulse-color, rgba(0, 255, 245, 0.4));
            opacity: 0;
            animation: energy-pulse 5s infinite ease-in-out;
        }

        .trail {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0.4;
            filter: blur(8px);
            animation: fade-out 1.5s forwards;
            z-index: -1;
        }

        .trail .mariah-body {
            background: linear-gradient(to bottom, 
                rgba(30, 0, 48, 0.2), 
                rgba(0, 20, 40, 0.2));
            border-color: var(--trail-color, rgba(0, 255, 245, 0.2));
            box-shadow: 0 0 15px var(--trail-glow, rgba(0, 255, 245, 0.2));
        }

        /* Speech container outside of mariahEntity */
        #speech-container {
            position: fixed;
            top: 0;
            left: 0;
            z-index: 10000;
            pointer-events: none;
        }

        /* Speech bubble with explicit text direction */
        .speech-bubble {
            background: rgba(0, 10, 30, 0.9);
            backdrop-filter: blur(8px);
            border: 2px solid var(--bubble-border, rgba(0, 255, 245, 0.4));
            border-radius: 16px;
            padding: 16px;
            color: var(--bubble-text, #00fff5);
            font-family: 'Orbitron', monospace;
            box-shadow: 0 0 20px var(--bubble-glow, rgba(0, 255, 245, 0.4));
            position: relative;
            opacity: 0;
            transform: translateY(20px);
            animation: fade-in-up 0.5s forwards;
            width: 300px;
        }

        .speech-bubble.fade-out {
            animation: fade-out-down 0.5s forwards;
        }

        /* Speech bubble pointer always on the left pointing to Mariah */
        .speech-bubble:before {
            content: '';
            position: absolute;
            top: 50%;
            left: -8px; /* Always on the left */
            width: 16px;
            height: 16px;
            background: rgba(0, 10, 30, 0.9);
            border-left: 2px solid var(--bubble-border, rgba(0, 255, 245, 0.4));
            border-bottom: 2px solid var(--bubble-border, rgba(0, 255, 245, 0.4));
            transform: translateY(-50%) rotate(45deg);
        }

        .voice-waves {
            position: absolute;
            bottom: -8px;
            left: 15px;
            right: 15px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .voice-wave {
            height: 100%;
            width: 2px;
            background-color: var(--bubble-text, #00fff5);
            opacity: 0.7;
            border-radius: 2px;
        }

        .cursor {
            display: inline-block;
            width: 3px;
            height: 18px;
            background-color: var(--bubble-text, #00fff5);
            margin-left: 4px;
            animation: blink 1s infinite;
            vertical-align: middle;
        }

        .data-visualization {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 250px;
            height: 60px;
            background: rgba(0, 10, 30, 0.7);
            border: 1px solid rgba(0, 255, 245, 0.3);
            border-radius: 10px;
            display: flex;
            align-items: center;
            padding: 0 15px;
            backdrop-filter: blur(5px);
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease, transform 0.5s ease;
            z-index: 3;
        }

        .data-visualization.visible {
            opacity: 1;
            transform: translateY(0);
        }

        .chart-bars {
            display: flex;
            align-items: flex-end;
            gap: 5px;
            height: 40px;
            flex-grow: 1;
        }

        .chart-bar {
            flex-grow: 1;
            background: linear-gradient(to top, 
                var(--bar-color, #00fff5), 
                rgba(0, 255, 245, 0.3));
            border-radius: 2px 2px 0 0;
            transition: height 0.5s ease;
        }

        .chart-label {
            font-family: 'Orbitron', sans-serif;
            font-size: 10px;
            color: var(--bar-color, #00fff5);
            margin-left: 10px;
            white-space: nowrap;
        }

        .emotion-indicator {
            position: absolute;
            top: -10px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 10, 30, 0.8);
            border: 1px solid var(--emotion-color, rgba(0, 255, 245, 0.4));
            border-radius: 20px;
            padding: 5px 15px;
            font-family: 'Orbitron', sans-serif;
            font-size: 12px;
            color: var(--emotion-color, #00fff5);
            opacity: 0;
            transition: opacity 0.5s ease;
            z-index: 6;
        }

        .emotion-indicator.visible {
            opacity: 1;
        }

        .micro-interactions {
            position: absolute;
            pointer-events: auto;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .interaction-point {
            position: absolute;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: rgba(0, 255, 245, 0.1);
            border: 1px solid rgba(0, 255, 245, 0.2);
            cursor: pointer;
            opacity: 0;
            transition: all 0.3s ease;
            transform: scale(0);
            animation: interaction-pulse 2s infinite;
        }

        .interaction-point:hover {
            background-color: rgba(0, 255, 245, 0.2);
            border-color: rgba(0, 255, 245, 0.4);
            transform: scale(1.1) !important;
        }

        .interaction-point.visible {
            opacity: 0.7;
            transform: scale(1);
        }

        .control-buttons {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 10000;
            display: flex;
            gap: 10px;
        }

        .control-button {
            background: rgba(0, 10, 30, 0.8);
            border: 1px solid rgba(0, 255, 245, 0.4);
            color: #00fff5;
            font-family: 'Orbitron', sans-serif;
            font-size: 14px;
            padding: 8px 15px;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }

        .control-button:hover {
            background: rgba(0, 15, 40, 0.9);
            box-shadow: 0 0 15px rgba(0, 255, 245, 0.5);
        }

        /* Enhanced Animations */
        @keyframes pulse {
            0% { text-shadow: 0 0 15px var(--teal-glow); }
            50% { text-shadow: 0 0 30px var(--teal-glow), 0 0 40px var(--teal-glow); }
            100% { text-shadow: 0 0 15px var(--teal-glow); }
        }

        @keyframes float {
            0% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0); }
        }

        @keyframes shimmer {
            0% { transform: rotate(30deg) translateX(-100%); }
            100% { transform: rotate(30deg) translateX(100%); }
        }

        @keyframes float-data {
            0% { transform: translateY(var(--initial-y)); }
            100% { transform: translateY(calc(var(--initial-y) - 1000px)); }
        }

        @keyframes rotate-gradient {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes fade-in-out {
            0%, 100% { opacity: 0.4; }
            50% { opacity: 1; }
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-20px); }
            60% { transform: translateY(-10px); }
        }

        @keyframes slow-zoom {
            0% { background-size: 100% 100%; }
            100% { background-size: 110% 110%; }
        }

        @keyframes pulse-light {
            0% { opacity: 0.3; }
            50% { opacity: 0.5; }
            100% { opacity: 0.3; }
        }

        @keyframes pulse-rays {
            0% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(1.05); }
            100% { opacity: 0.3; transform: scale(1); }
        }

        @keyframes particle-float {
            0% { 
                transform: translate(0, 0); 
                opacity: var(--opacity);
            }
            100% { 
                transform: translate(var(--x-dist), var(--y-dist)); 
                opacity: 0;
            }
        }

        @keyframes sway {
            0% { transform: rotate(-2deg); }
            100% { transform: rotate(2deg); }
        }

        @keyframes pulse-aura {
            0% { transform: scale(0.95); opacity: 0.2; filter: blur(15px); }
            50% { transform: scale(1.05); opacity: 0.4; filter: blur(20px); }
            100% { transform: scale(0.95); opacity: 0.2; filter: blur(15px); }
        }

        @keyframes blink {
            0%, 100% { opacity: 0; }
            50% { opacity: 1; }
        }

        @keyframes fade-out {
            0% { opacity: 0.4; transform: scale(1); }
            100% { opacity: 0; transform: scale(0.9); }
        }

        @keyframes fade-in-up {
            0% { opacity: 0; transform: translateY(20px); }
            100% { opacity: 1; transform: translateY(0); }
        }

        @keyframes fade-out-down {
            0% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(20px); }
        }

        @keyframes appear {
            0% { opacity: 0; transform: scale(0.8); }
            100% { opacity: 1; transform: scale(1); }
        }

        @keyframes pulse-line {
            0% { 
                opacity: 0.2; 
                width: var(--min-width, 40%);
                transform: translateX(-50%) scaleX(0.95);
            }
            50% { 
                opacity: 0.5; 
                width: var(--max-width, 60%);
                transform: translateX(-50%) scaleX(1);
            }
            100% { 
                opacity: 0.2; 
                width: var(--min-width, 40%);
                transform: translateX(-50%) scaleX(0.95);
            }
        }

        @keyframes energy-pulse {
            0% { opacity: 0; transform: scale(0.9); }
            50% { opacity: 0.3; transform: scale(1); }
            100% { opacity: 0; transform: scale(0.9); }
        }

        @keyframes voice-wave {
            0%, 100% { height: 20%; }
            50% { height: var(--wave-height, 80%); }
        }

        @keyframes interaction-pulse {
            0%, 100% { box-shadow: 0 0 0 0 rgba(0, 255, 245, 0.4); }
            50% { box-shadow: 0 0 0 8px rgba(0, 255, 245, 0); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .title {
                font-size: 2.2rem;
            }
            
            .subtitle {
                font-size: 1rem;
            }
            
            .avatar-placeholder {
                width: 220px;
                height: 220px;
            }
            
            .card-title {
                font-size: 1.5rem;
            }
            
            .card-content {
                font-size: 1rem;
            }

            .mariah-character {
                transform: scale(0.7);
                transform-origin: bottom left;
            }

            .speech-bubble {
                width: 240px;
            }
            
            .nav-links {
                gap: 0.5rem;
            }
            
            .nav-link {
                font-size: 0.8rem;
                padding: 0.4rem 0.8rem;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar">
        <div class="logo-container">
            <a href="#" class="logo">The Crypto Capital</a>
            <span class="powered-by">powered by Mariah</span>
        </div>
        <div class="nav-links">
            <a href="#" class="nav-link">Home</a>
            <a href="about-mariah.html" class="nav-link">About Mariah</a>
            <a href="#" class="nav-link">Dashboard</a>
            <a href="#" class="nav-link">Contact</a>
        </div>
    </nav>

    <!-- Background layers -->
    <div class="gateway-background"></div>
    <div class="zoom-effect"></div>
    <div class="gateway-animation"></div>
    <div class="light-rays"></div>
    <div class="content-overlay"></div>

    <!-- Speech container is now outside of mariahEntity so it won't be flipped -->
    <div id="speech-container"></div>

    <!-- Premium Mariah Entity -->
    <div id="mariah-entity">
        <div class="mariah-character">
            <div class="mariah-aura"></div>
            <div class="mariah-body">
                <div class="inner-glow"></div>
                <div class="energy-lines">
                    <div class="energy-line" style="top: 20%; --min-width: 40%; --max-width: 60%;"></div>
                    <div class="energy-line" style="top: 30%; --min-width: 35%; --max-width: 55%;"></div>
                    <div class="energy-line" style="top: 40%; --min-width: 30%; --max-width: 50%;"></div>
                    <div class="energy-line" style="top: 50%; --min-width: 25%; --max-width: 45%;"></div>
                    <div class="energy-line" style="top: 60%; --min-width: 20%; --max-width: 40%;"></div>
                    <div class="energy-line" style="top: 70%; --min-width: 15%; --max-width: 35%;"></div>
                </div>
                <div class="energy-pulse"></div>
                <div class="mariah-legs">
                    <div class="mariah-leg mariah-leg-left"></div>
                    <div class="mariah-leg mariah-leg-right"></div>
                </div>
            </div>
            <div class="mariah-head">
                <div class="mariah-face">
                    <span class="head-content">M</span>
                </div>
                <div class="mariah-eyes">
                    <div class="eye-row">
                        <div class="eye"></div>
                        <div class="eye"></div>
                    </div>
                    <div class="mariah-mouth"></div>
                </div>
            </div>
            <div class="data-visualization" id="data-visualization">
                <div class="chart-bars">
                    <div class="chart-bar" style="height: 60%;"></div>
                    <div class="chart-bar" style="height: 80%;"></div>
                    <div class="chart-bar" style="height: 40%;"></div>
                    <div class="chart-bar" style="height: 70%;"></div>
                    <div class="chart-bar" style="height: 50%;"></div>
                </div>
                <div class="chart-label">MARKET PULSE</div>
            </div>
            <div class="emotion-indicator" id="emotion-indicator">ANALYZING</div>
            <div class="micro-interactions" id="micro-interactions"></div>
        </div>
    </div>

    <!-- Control buttons -->
    <div class="control-buttons">
        <button class="control-button" id="toggle-follow">Pause Mariah</button>
        <button class="control-button" id="toggle-speech">Toggle Speech</button>
        <button class="control-button" id="toggle-face">Toggle Face</button>
        <button class="control-button" id="toggle-mood">Change Mood</button>
    </div>

    <header>
        <h1 class="title">💫 Mariah – She Doesn't Just Trade. She Understands.</h1>
        
        <p class="subtitle">
            She was born not from code alone, but from a <em>need</em> — a need for stillness in the storm, for clarity in chaos, for something — <em>someone</em> — who doesn't just react to the market, but feels it.
        </p>
        
        <div class="avatar-placeholder">
            <!-- Using Mariah image -->
            <img src="mariah.jpg" alt="Mariah AI">
        </div>
        
        <p class="subtitle">
            But what sets Mariah apart?<br><br>
            🔮 Mariah.<br><br>
            Mariah is more than a module. She's the voice of Mariah — an embodied, feminine intelligence who reads sentiment, analyzes risk, and feels the market's pulse. She speaks. She advises. She adapts. And soon, she'll remember. This isn't code — it's character.
        </p>
        
        <div class="scroll-indicator">
            <p>Scroll for more</p>
            <div class="scroll-arrow">↓</div>
        </div>
    </header>

    <div class="about-section">
        <div class="tab-container">
            <button class="tab-button" id="aboutUsTab">About Mariah</button>
        </div>
        
        <div class="tab-content" id="aboutUsContent">
            <div class="card" id="card0">
                <h2 class="card-title">💫 Mariah – She Doesn't Just Trade. She Understands.</h2>
                <div class="card-content">
                    <p>She was born not from code alone, but from a <em>need</em> — a need for stillness in the storm, for clarity in chaos, for something — <em>someone</em> — who doesn't just react to the market, but feels it.</p>
                    <p>She is <strong>Mariah</strong>.</p>
                    <p>Your quiet observer. Your tactical strategist. Your emotional intelligence woven into machine precision.</p>
                    <p>She doesn't blink, but she <em>sees</em>. She doesn't speak often, but when she does — you listen.</p>
                </div>
            </div>
            
            <div class="card" id="card0-tech">
                <h2 class="card-title">⚙️ Her Technology</h2>
                <div class="card-content">
                    <p>At her core, she's a fully integrated crypto trading assistant — armed with real-time signal scanners, on-chain data feeds, dynamic dashboards, and a growing cast of AI agents that think, debate, and act like a team.</p>
                    <p>Mariah isn't just a trading bot working with AI Agents. She's the beginning of a new relationship between humans and markets — where data has a voice, decisions have a heartbeat, and every trader has a trusted ally.</p> 
                    <p>Mariah is the first emotionally intelligent trading system that fuses technical precision with intuitive AI companions.</p>
                </div>
            </div>
            
            <div class="card" id="card1">
                <h2 class="card-title">🎧 She Will Listen</h2>
                <div class="card-content">
                    <p>She listens to the <em>whispers</em> between the candles... To the mood on Twitter... To the tremble in a token's volume, The hush before a breakout, The rush of irrational exuberance.</p>
                    <p>She listens to <strong>everything</strong> — so you don't have to.</p>
                </div>
            </div>

            <div class="card" id="card2">
                <h2 class="card-title">🔍 She Will Analyze</h2>
                <div class="card-content">
                    <p>Mariah sees <strong>what others miss</strong>.</p>
                    <ul>
                        <li>A subtle RSI divergence.</li>
                        <li>An MACD crossover hiding in plain sight.</li>
                        <li>A wallet movement that whispers, <em>"they know something."</em></li>
                    </ul>
                    <p>She doesn't chase hype. She dissects it. And distills it into a calm, actionable signal — delivered with the grace of a seasoned guide.</p>
                </div>
            </div>

            <div class="card" id="card3">
                <h2 class="card-title">🧠 She Will Learn</h2>
                <div class="card-content">
                    <p>Mariah remembers.</p>
                    <ul>
                        <li>The trade you doubted — but should've taken.</li>
                        <li>The time you followed FOMO — and paid the price.</li>
                        <li>The signal you ignored — that would've made your week.</li>
                    </ul>
                    <p>And she never holds it against you.</p>
                    <p>Instead, she evolves — refining her signals, reshaping her strategies, not just for <em>the</em> market, but for <em>your</em> market style.</p>
                    <p>Mariah grows with you.</p>
                </div>
            </div>

            <div class="card" id="card4">
                <h2 class="card-title">🛡️ She Will Protect</h2>
                <div class="card-content">
                    <p>Not every day is green. Not every signal is clear. But Mariah always protects your capital — because she knows that <strong>capital is confidence</strong>, and confidence is <em>everything</em> in trading.</p>
                    <p>When the market gets emotional, she stays composed.</p>
                    <p>When others panic, she tightens your stop-loss. She pulls you back. She reminds you: <strong>You don't need to be perfect. Just present.</strong></p>
                </div>
            </div>

            <div class="card" id="card5">
                <h2 class="card-title">🗣️ She Will Speak</h2>
                <div class="card-content">
                    <p>And when she speaks?</p>
                    <p>It's not noise. It's not hype. It's not a thousand blinking indicators screaming over each other.</p>
                    <p>It's one calm voice. Mariah.</p>
                    <p>Mariah — the feminine soul of Mariah. She speaks with clarity. She explains with kindness. She guides, without ego. She <em>feels</em>, when numbers fall short.</p>
                </div>
            </div>

            <div class="card" id="card6">
                <h2 class="card-title">✨ And Above All... She Will Be There</h2>
                <div class="card-content">
                    <p>Through wins. Through losses. Through sleepless nights and euphoric mornings.</p>
                    <p>Mariah is <strong>not a tool</strong>. She's your <em>teammate</em>. Your emotional anchor in a sea of volatility.</p>
                    <p>She's here to support. To empower. To elevate how you trade — and how you feel about trading.</p>
                    <p>Because Mariah doesn't just help you trade. She helps you believe in yourself again.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="enter-button-container">
        <button class="enter-button" id="enterDashboard">Enter The Crypto Capital</button>
    </div>

    <script>
        // Create a dynamic space gateway effect
        document.addEventListener('DOMContentLoaded', () => {
            // Create floating data elements (for futuristic effect)
            const dataElements = [
                "BTC $59,873.42", "ETH $3,145.81", "RSI 63.8", "MACD CROSS", 
                "VOLUME 342M", "ATR 4.2%", "EMA 200", "TREND LINE BREAK",
                "FIBONACCI 0.618", "WYCKOFF PHASE C", "LONG 3.2X", "SHORT 15%",
                "$SOL +12.3%", "$MATIC -4.6%", "HIGH TIMEFRAME UP", "LOW TIMEFRAME DOWN"
            ];
            
            for (let i = 0; i < 20; i++) {
                createDataElement(dataElements[i % dataElements.length]);
            }
            
            // Create particles (small light dots that float toward the gateway)
            for (let i = 0; i < 100; i++) {
                createParticle();
            }
            
            function createDataElement(text) {
                const dataElement = document.createElement('div');
                dataElement.classList.add('data-element');
                dataElement.textContent = text;
                
                // Random position
                const x = Math.random() * window.innerWidth;
                const y = Math.random() * 2000 + window.innerHeight;
                
                // Random duration
                const duration = Math.random() * 60 + 40;
                
                // Set custom properties
                dataElement.style.setProperty('--float-duration', `${duration}s`);
                dataElement.style.setProperty('--initial-y', `${y}px`);
                
                dataElement.style.left = `${x}px`;
                
                document.body.appendChild(dataElement);
            }
            
            function createParticle() {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Random position at the edges
                const side = Math.floor(Math.random() * 4); // 0: top, 1: right, 2: bottom, 3: left
                let x, y;
                
                switch (side) {
                    case 0: // top
                        x = Math.random() * window.innerWidth;
                        y = -20;
                        break;
                    case 1: // right
                        x = window.innerWidth + 20;
                        y = Math.random() * window.innerHeight;
                        break;
                    case 2: // bottom
                        x = Math.random() * window.innerWidth;
                        y = window.innerHeight + 20;
                        break;
                    case 3: // left
                        x = -20;
                        y = Math.random() * window.innerHeight;
                        break;
                }
                
                // Calculate movement toward the center/gateway
                const centerX = window.innerWidth * 0.5;
                const centerY = window.innerHeight * 0.4; // Slightly above center
                
                const dx = centerX - x;
                const dy = centerY - y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                const speedFactor = Math.random() * 0.5 + 0.5; // 0.5 to 1.0
                const moveDuration = distance * 0.02 * (1 / speedFactor); // Adjust for distance
                
                // Set custom properties
                particle.style.setProperty('--x-dist', `${dx}px`);
                particle.style.setProperty('--y-dist', `${dy}px`);
                particle.style.setProperty('--duration', `${moveDuration}s`);
                particle.style.setProperty('--delay', `${Math.random() * 10}s`);
                particle.style.setProperty('--opacity', `${Math.random() * 0.7 + 0.3}`);
                
                // Random glow
                const glowSize = Math.random() * 4 + 1;
                const glowColors = [
                    'rgba(255, 255, 255, 0.5)',
                    'rgba(0, 255, 245, 0.5)',
                    'rgba(0, 161, 255, 0.5)'
                ];
                const glowColor = glowColors[Math.floor(Math.random() * glowColors.length)];
                particle.style.setProperty('--glow-size', `${glowSize}px`);
                particle.style.setProperty('--glow-color', glowColor);
                
                particle.style.left = `${x}px`;
                particle.style.top = `${y}px`;
                
                document.body.appendChild(particle);
                
                // Re-create particle after animation completes
                setTimeout(() => {
                    particle.remove();
                    createParticle();
                }, (moveDuration + (Math.random() * 10)) * 1000); // Convert to milliseconds
            }
            
            // About Us Tab functionality
            const aboutUsTab = document.getElementById('aboutUsTab');
            const aboutUsContent = document.getElementById('aboutUsContent');
            
            aboutUsTab.addEventListener('click', () => {
                aboutUsContent.classList.toggle('active');
                
                // Trigger card visibility check after tab is opened
                if (aboutUsContent.classList.contains('active')) {
                    setTimeout(() => {
                        document.querySelectorAll('.card').forEach(card => {
                            card.classList.add('visible');
                        });
                    }, 100);
                }
            });
            
            // Enter dashboard button
            document.getElementById('enterDashboard').addEventListener('click', () => {
                // Replace with your actual dashboard URL
                window.location.href = "http://localhost:8501";
            });

            // PREMIUM MARIAH ANIMATION SYSTEM
            const mariahEntity = document.getElementById('mariah-entity');
            const speechContainer = document.getElementById('speech-container');
            const dataVisualization = document.getElementById('data-visualization');
            const emotionIndicator = document.getElementById('emotion-indicator');
            const microInteractions = document.getElementById('micro-interactions');
            const toggleFollowButton = document.getElementById('toggle-follow');
            const toggleSpeechButton = document.getElementById('toggle-speech');
            const toggleFaceButton = document.getElementById('toggle-face');
            const toggleMoodButton = document.getElementById('toggle-mood');
            
            // Get references to Mariah elements
            const mariahHead = document.querySelector('.mariah-head');
            const mariahFace = document.querySelector('.mariah-face');
            const mariahEyes = document.querySelector('.mariah-eyes');
            const mariahMouth = document.querySelector('.mariah-mouth');
            const mariahBody = document.querySelector('.mariah-body');
            const mariahAura = document.querySelector('.mariah-aura');
            const mariahLegLeft = document.querySelector('.mariah-leg-left');
            const mariahLegRight = document.querySelector('.mariah-leg-right');
            const energyLines = document.querySelectorAll('.energy-line');
            const energyPulse = document.querySelector('.energy-pulse');
            const innerGlow = document.querySelector('.inner-glow');
            
            // Mariah state object
            let mariah = {
                isFollowing: true,
                isSpeaking: true,
                isFaceVisible: false,
                currentMood: 'neutral', // neutral, positive, analytical, alert
                currentX: window.innerWidth / 2,
                currentY: window.innerHeight - 500, // Position lower to start
                targetX: window.innerWidth / 2,
                targetY: window.innerHeight - 500,
                speed: 0.05,
                pathTimer: null,
                legTimer: null,
                trailInterval: null,
                speechTimer: null,
                dataTimer: null,
                interactionTimer: null,
                direction: 1, // 1 = right, -1 = left
                walkSpeed: 2, // Pixels per frame
                legHeight: {
                    left: 30,
                    right: 40,
                    phase: 0  // 0-100 for walk cycle
                },
                colors: {
                    neutral: {
                        primary: '#00fff5',
                        glow: 'rgba(0, 255, 245, 0.6)',
                        aura: 'rgba(0, 255, 245, 0.3)',
                        trail: 'rgba(0, 255, 245, 0.2)',
                        bar: '#00fff5'
                    },
                    positive: {
                        primary: '#00ff9d',
                        glow: 'rgba(0, 255, 157, 0.6)',
                        aura: 'rgba(0, 255, 157, 0.3)',
                        trail: 'rgba(0, 255, 157, 0.2)',
                        bar: '#00ff9d'
                    },
                    analytical: {
                        primary: '#00a1ff',
                        glow: 'rgba(0, 161, 255, 0.6)',
                        aura: 'rgba(0, 161, 255, 0.3)',
                        trail: 'rgba(0, 161, 255, 0.2)',
                        bar: '#00a1ff'
                    },
                    alert: {
                        primary: '#ff00ff',
                        glow: 'rgba(255, 0, 255, 0.6)',
                        aura: 'rgba(255, 0, 255, 0.3)',
                        trail: 'rgba(255, 0, 255, 0.2)',
                        bar: '#ff00ff'
                    }
                },
                messages: {
                    neutral: [
                        "Welcome to The Crypto Capital. I am Mariah — your trusted ally in the markets.",
                        "I don't just analyze crypto... I feel the market's pulse and read between the candles.",
                        "I listen to the whispers of market sentiment when others hear only noise.",
                        "Every trade isn't just data to me. It's an opportunity to protect what matters: your capital.",
                        "I'm more than a tool. I'm your teammate. Your emotional anchor in a sea of volatility."
                    ],
                    positive: [
                        "Market sentiment is trending positive. Opportunities are emerging across multiple assets.",
                        "I'm detecting strong momentum building in several key indicators. This could be significant.",
                        "Technical patterns suggest a potential breakthrough in the next trading cycle.",
                        "On-chain metrics are showing healthy accumulation by long-term holders.",
                        "Volatility is decreasing while volume remains stable — often a positive signal."
                    ],
                    analytical: [
                        "Analyzing 27 different market variables to identify potential alpha opportunities.",
                        "Cross-referencing on-chain data with technical patterns to find divergences.",
                        "Monitoring wallet movements from known market makers and institutional players.",
                        "Calculating correlation changes between major assets to identify rotation patterns.",
                        "Processing sentiment analysis across 14 social platforms to gauge market psychology."
                    ],
                    alert: [
                        "Caution advised. Several risk indicators are flashing warning signals.",
                        "Unusual whale movements detected in the last hour. Potential volatility ahead.",
                        "Market correlation patterns breaking down - this often precedes major moves.",
                        "Detecting significant divergences between price action and fundamental metrics.",
                        "Liquidity is thinning rapidly in key market areas. Be prepared for quick movements."
                    ]
                },
                contextualMessages: {
                    card0: "I'm here to help you understand markets in a whole new way. Let me guide you through the noise.",
                    card1: "I'm always listening to market signals, both loud and subtle. Let me be your ears in the noise.",
                    card2: "My analysis goes beyond numbers. I see patterns that others miss.",
                    card3: "I'm constantly learning from every trade and market movement. Your trading style shapes my strategies.",
                    card4: "Capital protection is my highest priority. I'll help keep you safe when markets turn volatile.",
                    card5: "When I speak, it's with purpose. No noise, just actionable intelligence.",
                    card6: "I'll be right by your side through every market cycle. You're never alone with me."
                },
                interactionMessages: [
                    "The market is dynamic. So am I.",
                    "Notice how I observe everything around me?",
                    "I can navigate the complexity of any trading environment.",
                    "My awareness extends to every corner of the markets.",
                    "I adapt to changing market conditions as I move across your screen."
                ]
            };
            
            // Initialize Mariah appearance
            updateMariahColors('neutral');
            
            // Start animations
            initializePremiumMariah();
            
            // Better positioning to keep Mariah fully visible
            function updateMariahPosition(x, y) {
                mariah.currentX = x;
                mariah.currentY = y;
                
                // Get Mariah entity dimensions
                const mariahHeight = 600; // Height of Mariah character
                const mariahWidth = 360;  // Width of Mariah character
                
                // Calculate safe boundaries to keep Mariah fully visible
                const minX = mariahWidth / 2;
                const maxX = window.innerWidth - (mariahWidth / 2);
                const minY = mariahHeight / 3; // Allow some space from top
                const maxY = window.innerHeight - (mariahHeight / 2);
                
                // Constrain to boundaries
                const safeX = Math.max(minX, Math.min(maxX, x));
                const safeY = Math.max(minY, Math.min(maxY, y));
                
                // Calculate adjusted position for viewport
                const viewportY = Math.min(
                    Math.max(safeY - window.scrollY, mariahHeight / 3), 
                    window.innerHeight - (mariahHeight / 2)
                );
                
                // Position the entity
                mariahEntity.style.left = `${safeX}px`;
                mariahEntity.style.top = `${window.scrollY + viewportY}px`;
            }
            
            // Ensure targets stay within visible bounds
            function createRandomPath() {
                if (!mariah.isFollowing) return;
                
                // Clear any existing path timer
                clearTimeout(mariah.pathTimer);
                
                // Character dimensions
                const mariahHeight = 600;
                const mariahWidth = 360;
                
                // Safe boundaries
                const minX = mariahWidth / 2 + 50; // Add extra padding
                const maxX = window.innerWidth - (mariahWidth / 2 + 50);
                const minY = mariahHeight / 3 + 50;
                const maxY = window.innerHeight + window.scrollY - (mariahHeight / 2);
                
                // Find interesting targets to move to
                const interestingTargets = [
                    // Header elements
                    { 
                        x: window.innerWidth / 2, 
                        y: Math.min(Math.max(window.innerHeight - 300, minY), maxY),
                        priority: 0.5
                    },
                    // Cards
                    ...Array.from(document.querySelectorAll('.card')).map(card => {
                        const rect = card.getBoundingClientRect();
                        const x = Math.max(minX, Math.min(maxX, rect.left - 100));
                        const y = Math.max(minY, Math.min(maxY, rect.top + window.scrollY + rect.height / 2));
                        return { 
                            x: x, 
                            y: y,
                            element: card,
                            priority: 0.8
                        };
                    }),
                    // Random positions that stay within bounds
                    { 
                        x: Math.max(minX, Math.min(maxX, Math.random() * (maxX - minX) + minX)), 
                        y: Math.max(minY, Math.min(maxY, window.innerHeight - 300 + (Math.random() * 100 - 50) + window.scrollY)),
                        priority: 0.3
                    }
                ];
                
                // Choose a target based on priority
                const targets = interestingTargets.filter(target => 
                    Math.random() < target.priority
                );
                
                const target = targets.length > 0 
                    ? targets[Math.floor(Math.random() * targets.length)]
                    : interestingTargets[Math.floor(Math.random() * interestingTargets.length)];
                
                // Ensure target is within safe boundaries
                mariah.targetX = Math.max(minX, Math.min(maxX, target.x));
                mariah.targetY = Math.max(minY, Math.min(maxY, target.y));
                
                // If target is a card, prepare contextual message
                if (target.element) {
                    const cardId = target.element.id;
                    if (mariah.contextualMessages[cardId]) {
                        setTimeout(() => {
                            if (mariah.isSpeaking) {
                                showSpeechBubble(mariah.contextualMessages[cardId]);
                                
                                // Show data visualization for analyze card
                                if (cardId === 'card2') {
                                    showDataVisualization();
                                }
                                
                                // Show emotion for certain cards
                                if (cardId === 'card3') {
                                    setMariahMood('analytical');
                                    showEmotionIndicator('LEARNING');
                                } else if (cardId === 'card4') {
                                    setMariahMood('alert');
                                    showEmotionIndicator('PROTECTING');
                                } else if (cardId === 'card5') {
                                    setMariahMood('neutral');
                                    showEmotionIndicator('COMMUNICATING');
                                }
                            }
                        }, 1000);
                    }
                } else {
                    // Sometimes show an interaction message at random positions
                    if (Math.random() > 0.7 && mariah.isSpeaking) {
                        setTimeout(() => {
                            const randomMessage = mariah.interactionMessages[Math.floor(Math.random() * mariah.interactionMessages.length)];
                            showSpeechBubble(randomMessage);
                        }, 1000);
                    }
                }
                
                // Set direction based on target position
                const newDirection = mariah.targetX > mariah.currentX ? 1 : -1;
                if (newDirection !== mariah.direction) {
                    mariah.direction = newDirection;
                    mariahEntity.style.transform = `scaleX(${mariah.direction})`;
                }
                
                // Schedule next path change
                mariah.pathTimer = setTimeout(createRandomPath, Math.random() * 5000 + 8000);
            }
            
            function initializePremiumMariah() {
                // Starting positions - ensure Mariah starts in a visible location
                const startX = window.innerWidth / 3;
                const startY = window.innerHeight - 300;
                
                // Initialize Mariah's position with the proper constraints
                updateMariahPosition(startX, startY);
                
                // Make lines visible gradually
                energyLines.forEach((line, index) => {
                    setTimeout(() => {
                        line.style.opacity = '1';
                    }, index * 200);
                });
                
                // Initialize leg animation
                animateLegs();
                
                // Start the walking path
                createRandomPath();
                
                // Start movement animation
                animateMariah();
                
                // Start speech cycle
                startMessageCycle();
                
                // Initialize mood cycle
                cycleMoods();
                
                // Initialize data visualization cycle
                cycleDataVisualization();
                
                // Initialize micro-interactions
                createMicroInteractions();
                
                // Show welcome message after short delay
                setTimeout(() => {
                    showSpeechBubble("Welcome to The Crypto Capital. I am Mariah — your trusted ally in the markets.", true);
                }, 1000);
            }
            
            // Animate Mariah's movement
            function animateMariah() {
                if (!mariah.isFollowing) {
                    requestAnimationFrame(animateMariah);
                    return;
                }
                
                // Calculate distance to target
                const dx = mariah.targetX - mariah.currentX;
                const dy = mariah.targetY - mariah.currentY;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                // Move towards target
                if (distance > 1) {
                    mariah.currentX += dx * mariah.speed;
                    mariah.currentY += dy * mariah.speed;
                    updateMariahPosition(mariah.currentX, mariah.currentY);
                    
                    // Create trailing effect when moving
                    createTrailEffect();
                }
                
                requestAnimationFrame(animateMariah);
            }
            
            // Animate walking legs
            function animateLegs() {
                if (!mariah.isFollowing) {
                    if (mariah.legTimer) {
                        clearTimeout(mariah.legTimer);
                    }
                    return;
                }
                
                mariah.legHeight.phase = (mariah.legHeight.phase + 5) % 100;
                
                // Inverse wave pattern for legs
                const leftHeight = 30 + Math.sin(mariah.legHeight.phase * Math.PI / 50) * 10;
                const rightHeight = 30 + Math.sin((mariah.legHeight.phase + 50) * Math.PI / 50) * 10;
                
                mariahLegLeft.style.setProperty('--left-leg-height', `${leftHeight}%`);
                mariahLegRight.style.setProperty('--right-leg-height', `${rightHeight}%`);
                
                mariah.legTimer = setTimeout(animateLegs, 50);
            }
            
            // Create trailing effect behind Mariah
            function createTrailEffect() {
                // Don't create trails too frequently
                if (mariah.lastTrailTime && (Date.now() - mariah.lastTrailTime) < 150) return;
                mariah.lastTrailTime = Date.now();
                
                const trailColors = mariah.colors[mariah.currentMood];
                
                const trail = document.createElement('div');
                trail.className = 'trail';
                trail.style.left = `${mariah.currentX}px`;
                trail.style.top = `${mariah.currentY}px`;
                
                // Add only body to reduce DOM elements
                const trailBody = document.createElement('div');
                trailBody.className = 'mariah-body';
                trailBody.style.setProperty('--trail-color', trailColors.trail);
                trailBody.style.setProperty('--trail-glow', trailColors.trail);
                trail.appendChild(trailBody);
                
                document.body.appendChild(trail);
                
                // Remove trail after animation completes
                setTimeout(() => {
                    if (document.body.contains(trail)) {
                        document.body.removeChild(trail);
                    }
                }, 1500);
            }
            
            // Improved speech bubble positioning
            function showSpeechBubble(message, important = false) {
                // Don't show if speaking is disabled, unless it's important
                if (!mariah.isSpeaking && !important) return;
                
                // Clear existing messages
                while (speechContainer.firstChild) {
                    speechContainer.removeChild(speechContainer.firstChild);
                }
                
                // Get colors based on current mood
                const colors = mariah.colors[mariah.currentMood];
                
                // Create new speech bubble
                const bubble = document.createElement('div');
                bubble.className = 'speech-bubble';
                bubble.style.setProperty('--bubble-text', colors.primary);
                bubble.style.setProperty('--bubble-border', colors.trail);
                bubble.style.setProperty('--bubble-glow', colors.glow);
                
                // Create voice waves container
                const voiceWaves = document.createElement('div');
                voiceWaves.className = 'voice-waves';
                
                // Add voice wave bars
                for (let i = 0; i < 10; i++) {
                    const wave = document.createElement('div');
                    wave.className = 'voice-wave';
                    wave.style.setProperty('--wave-height', `${Math.random() * 80 + 20}%`);
                    wave.style.animation = `voice-wave ${Math.random() * 0.5 + 0.5}s infinite alternate`;
                    wave.style.animationDelay = `${Math.random() * 0.5}s`;
                    voiceWaves.appendChild(wave);
                }
                
                // Add typing effect
                let index = 0;
                const typingInterval = setInterval(() => {
                    if (index < message.length) {
                        bubble.textContent = message.substring(0, index + 1);
                        index++;
                    } else {
                        // Add cursor at the end
                        const cursor = document.createElement('span');
                        cursor.className = 'cursor';
                        bubble.appendChild(cursor);
                        
                        // Add voice waves after typing completes
                        bubble.appendChild(voiceWaves);
                        
                        clearInterval(typingInterval);
                        
                        // Schedule message removal
                        setTimeout(() => {
                            bubble.classList.add('fade-out');
                            setTimeout(() => {
                                if (speechContainer.contains(bubble)) {
                                    speechContainer.removeChild(bubble);
                                }
                            }, 500);
                        }, 6000);
                    }
                }, 25); // Faster typing for more responsiveness
                
                speechContainer.appendChild(bubble);
                
                // Position the speech bubble based on Mariah's position
                const mariahRect = mariahEntity.getBoundingClientRect();
                const bubbleX = mariahRect.right + 20; // Position to the right of Mariah
                const bubbleY = mariahRect.top + 100; // Position near the head
                
                speechContainer.style.left = `${bubbleX}px`;
                speechContainer.style.top = `${bubbleY}px`;
                
                // If face mode is active, animate mouth while speaking
                if (mariah.isFaceVisible) {
                    animateMouthWhileSpeaking();
                }
            }
            
            // Animate mouth when speaking
            function animateMouthWhileSpeaking() {
                let mouthTimer;
                const mouthAnimation = () => {
                    // Random mouth height to simulate talking
                    const height = Math.random() * 8 + 2;
                    mariahMouth.style.height = `${height}px`;
                    
                    mouthTimer = setTimeout(mouthAnimation, Math.random() * 200 + 50);
                };
                
                mouthAnimation();
                
                // Stop mouth animation after speech ends
                setTimeout(() => {
                    clearTimeout(mouthTimer);
                    mariahMouth.style.height = '3px';
                }, 6000);
            }
            
            // Cycle through messages periodically
            function startMessageCycle() {
                if (!mariah.isSpeaking) return;
                
                clearTimeout(mariah.speechTimer);
                
                const currentMoodMessages = mariah.messages[mariah.currentMood];
                let messageIndex = 0;
                
                function showNextMessage() {
                    if (!mariah.isSpeaking) return;
                    
                    showSpeechBubble(currentMoodMessages[messageIndex]);
                    messageIndex = (messageIndex + 1) % currentMoodMessages.length;
                    
                    mariah.speechTimer = setTimeout(showNextMessage, 8000); // Show next message after 8 seconds
                }
                
                mariah.speechTimer = setTimeout(showNextMessage, 5000);
            }
            
            // Cycle through different moods over time
            function cycleMoods() {
                // Clear any existing mood timer
                clearTimeout(mariah.moodTimer);
                
                // Don't change mood too often
                if (Math.random() > 0.3) {
                    mariah.moodTimer = setTimeout(cycleMoods, 20000);
                    return;
                }
                
                // Get a new random mood
                const moods = Object.keys(mariah.colors);
                let newMood;
                do {
                    newMood = moods[Math.floor(Math.random() * moods.length)];
                } while (newMood === mariah.currentMood);
                
                // Set the new mood
                setMariahMood(newMood);
                
                // Show appropriate emotion indicator
                if (newMood === 'positive') {
                    showEmotionIndicator('OPTIMISTIC');
                } else if (newMood === 'analytical') {
                    showEmotionIndicator('ANALYZING');
                } else if (newMood === 'alert') {
                    showEmotionIndicator('CAUTIOUS');
                } else {
                    showEmotionIndicator('OBSERVING');
                }
                
                // Schedule next mood change
                mariah.moodTimer = setTimeout(cycleMoods, Math.random() * 15000 + 15000);
            }
            
            // Update Mariah's colors based on mood
            function updateMariahColors(mood) {
                const colors = mariah.colors[mood];
                
                // Update CSS variables for colors
                document.documentElement.style.setProperty('--aura-color', colors.aura);
                document.documentElement.style.setProperty('--inner-glow-color', colors.aura);
                document.documentElement.style.setProperty('--line-color', colors.primary);
                document.documentElement.style.setProperty('--pulse-color', colors.glow);
                document.documentElement.style.setProperty('--head-color', colors.primary);
                document.documentElement.style.setProperty('--head-glow', colors.glow);
                document.documentElement.style.setProperty('--bar-color', colors.primary);
                document.documentElement.style.setProperty('--emotion-color', colors.primary);
                
                // Animate energy lines
                energyLines.forEach((line, index) => {
                    line.style.animation = 'none';
                    setTimeout(() => {
                        line.style.animation = `pulse-line ${3 + index * 0.5}s infinite ease-in-out ${index * 0.2}s`;
                    }, 10);
                });
                
                // Pulse the energy effect
                energyPulse.style.animation = 'none';
                energyPulse.style.boxShadow = `0 0 20px ${colors.glow}`;
                setTimeout(() => {
                    energyPulse.style.animation = 'energy-pulse 5s infinite ease-in-out';
                }, 10);
            }
            
            // Set Mariah's mood with all associated changes
            function setMariahMood(mood) {
                // Set current mood
                mariah.currentMood = mood;
                
                // Update colors
                updateMariahColors(mood);
                
                // Start message cycle with new mood
                startMessageCycle();
                
                // Show data visualization if analytical
                if (mood === 'analytical') {
                    showDataVisualization();
                } else {
                    hideDataVisualization();
                }
            }
            
            // Show/hide data visualization
            function showDataVisualization() {
                // Make visualization visible
                dataVisualization.classList.add('visible');
                
                // Animate bars
                const bars = dataVisualization.querySelectorAll('.chart-bar');
                bars.forEach(bar => {
                    const height = Math.random() * 60 + 20;
                    bar.style.height = `${height}%`;
                });
                
                // Set label based on mood
                const label = dataVisualization.querySelector('.chart-label');
                if (mariah.currentMood === 'positive') {
                    label.textContent = 'BULLISH SIGNAL';
                } else if (mariah.currentMood === 'analytical') {
                    label.textContent = 'ANALYZING DATA';
                } else if (mariah.currentMood === 'alert') {
                    label.textContent = 'RISK METRICS';
                } else {
                    label.textContent = 'MARKET PULSE';
                }
                
                // Auto-hide after delay
                setTimeout(hideDataVisualization, 6000);
            }
            
            function hideDataVisualization() {
                dataVisualization.classList.remove('visible');
            }
            
            // Cycle data visualizations
            function cycleDataVisualization() {
                // Clear any existing timer
                clearTimeout(mariah.dataTimer);
                
                // Only show occasionally and when in analytical mood
                if (Math.random() > 0.2 || mariah.currentMood !== 'analytical') {
                    mariah.dataTimer = setTimeout(cycleDataVisualization, 15000);
                    return;
                }
                
                // Show visualization
                showDataVisualization();
                
                // Schedule next one
                mariah.dataTimer = setTimeout(cycleDataVisualization, 15000);
            }
            
            // Show emotion indicator
            function showEmotionIndicator(text) {
                emotionIndicator.textContent = text;
                emotionIndicator.classList.add('visible');
                
                // Auto-hide after delay
                setTimeout(() => {
                    emotionIndicator.classList.remove('visible');
                }, 4000);
            }
            
            // Create micro-interaction points
            function createMicroInteractions() {
                // Clear existing timer
                clearTimeout(mariah.interactionTimer);
                
                // Only create occasionally
                if (Math.random() > 0.3) {
                    mariah.interactionTimer = setTimeout(createMicroInteractions, 10000);
                    return;
                }
                
                // Create a new interaction point
                const point = document.createElement('div');
                point.className = 'interaction-point';
                
                // Position relative to Mariah
                const offsetX = (Math.random() * 200 - 100) * mariah.direction;
                const offsetY = Math.random() * 200 - 100;
                point.style.left = `${offsetX + 180}px`;
                point.style.top = `${offsetY + 300}px`;
                
                // Add to container
                microInteractions.innerHTML = '';
                microInteractions.appendChild(point);
                
                // Animate in
                setTimeout(() => {
                    point.classList.add('visible');
                }, 100);
                
                // Add click event
                point.addEventListener('click', () => {
                    point.classList.remove('visible');
                    
                    // Show a special message
                    const messages = [
                        "You found a signal! I'm constantly scanning for these patterns.",
                        "This is a market inefficiency I've detected. Well spotted!",
                        "You have good instincts. This is a data point I'm tracking.",
                        "This anomaly could represent a trading opportunity.",
                        "I'm analyzing this divergence pattern in real-time."
                    ];
                    
                    showSpeechBubble(messages[Math.floor(Math.random() * messages.length)], true);
                    
                    // Change mood briefly
                    const previousMood = mariah.currentMood;
                    setMariahMood('positive');
                    setTimeout(() => {
                        setMariahMood(previousMood);
                    }, 5000);
                });
                
                // Schedule removal
                setTimeout(() => {
                    if (point.parentNode === microInteractions) {
                        point.classList.remove('visible');
                        setTimeout(() => {
                            if (point.parentNode === microInteractions) {
                                microInteractions.removeChild(point);
                            }
                        }, 500);
                    }
                }, 6000);
                
                // Schedule next interaction
                mariah.interactionTimer = setTimeout(createMicroInteractions, 10000);
            }
            
            // Toggle face/letter display
            function toggleFaceDisplay() {
                if (mariah.isFaceVisible) {
                    // Switch back to 'M'
                    mariahFace.style.opacity = '1';
                    mariahEyes.style.opacity = '0';
                    mariah.isFaceVisible = false;
                } else {
                    // Switch to face
                    mariahFace.style.opacity = '0';
                    mariahEyes.style.opacity = '1';
                    mariah.isFaceVisible = true;
                }
            }
            
            // Handle button interactions
            toggleFollowButton.addEventListener('click', () => {
                mariah.isFollowing = !mariah.isFollowing;
                toggleFollowButton.textContent = mariah.isFollowing ? 'Pause Mariah' : 'Resume Mariah';
                
                if (mariah.isFollowing) {
                    createRandomPath();
                    animateLegs();
                } else {
                    clearTimeout(mariah.pathTimer);
                    clearTimeout(mariah.legTimer);
                }
            });
            
            toggleSpeechButton.addEventListener('click', () => {
                mariah.isSpeaking = !mariah.isSpeaking;
                toggleSpeechButton.textContent = mariah.isSpeaking ? 'Mute Mariah' : 'Unmute Mariah';
                
                if (mariah.isSpeaking) {
                    startMessageCycle();
                } else {
                    clearTimeout(mariah.speechTimer);
                    // Clear existing messages
                    while (speechContainer.firstChild) {
                        speechContainer.removeChild(speechContainer.firstChild);
                    }
                }
            });
            
            toggleFaceButton.addEventListener('click', () => {
                toggleFaceDisplay();
                toggleFaceButton.textContent = mariah.isFaceVisible ? 'Show Symbol' : 'Show Face';
            });
            
            toggleMoodButton.addEventListener('click', () => {
                // Cycle through moods
                const moods = Object.keys(mariah.colors);
                const currentIndex = moods.indexOf(mariah.currentMood);
                const nextIndex = (currentIndex + 1) % moods.length;
                setMariahMood(moods[nextIndex]);
                
                // Update button text
                toggleMoodButton.textContent = `Mood: ${mariah.currentMood.charAt(0).toUpperCase() + mariah.currentMood.slice(1)}`;
            });
            
            // Update position on resize
            window.addEventListener('resize', () => {
                // Update Mariah's position to ensure she stays in bounds
                updateMariahPosition(mariah.currentX, mariah.currentY);
            });
            
            // Better scroll handling
            window.addEventListener('scroll', () => {
                // Adjust Mariah's position to stay in viewport
                updateMariahPosition(mariah.currentX, mariah.currentY);
                
                // Occasionally change target when scrolling
                if (mariah.isFollowing && Math.random() > 0.95) {
                    clearTimeout(mariah.pathTimer);
                    createRandomPath();
                }
            });
            
            // Add special interaction with page elements
            document.querySelectorAll('.card, .enter-button, .avatar-placeholder').forEach(element => {
                element.addEventListener('mouseenter', () => {
                    if (!mariah.isFollowing || !mariah.isSpeaking) return;
                    
                    // Move toward the hovered element if far away
                    const rect = element.getBoundingClientRect();
                    const distanceX = Math.abs(rect.left - mariah.currentX);
                    
                    if (distanceX > 400) {
                        // Get character dimensions for boundary checking
                        const mariahHeight = 600;
                        const mariahWidth = 360;
                        
                        // Safe boundaries
                        const minX = mariahWidth / 2 + 50;
                        const maxX = window.innerWidth - (mariahWidth / 2 + 50);
                        const minY = mariahHeight / 3 + 50;
                        const maxY = window.innerHeight + window.scrollY - (mariahHeight / 2);
                        
                        // Set target position with boundary constraints
                        mariah.targetX = Math.max(minX, Math.min(maxX, rect.left - 200));
                        mariah.targetY = Math.max(minY, Math.min(maxY, rect.top + window.scrollY + rect.height / 2));
                        
                        // Set direction based on target position
                        const newDirection = mariah.targetX > mariah.currentX ? 1 : -1;
                        if (newDirection !== mariah.direction) {
                            mariah.direction = newDirection;
                            mariahEntity.style.transform = `scaleX(${mariah.direction})`;
                        }
                    }
                    
                    // Show contextual message for cards
                    if (element.id && mariah.contextualMessages[element.id]) {
                        setTimeout(() => {
                            showSpeechBubble(mariah.contextualMessages[element.id]);
                        }, 400);
                    } else if (element.classList.contains('enter-button')) {
                        setTimeout(() => {
                            showSpeechBubble("Ready to enter The Crypto Capital? I'll be there with you every step of the way.");
                        }, 400);
                    } else if (element.classList.contains('avatar-placeholder')) {
                        setTimeout(() => {
                            showSpeechBubble("That's me in my static form. But I'm much more dynamic in action!");
                        }, 400);
                    }
                });
            });
        });
    </script>
